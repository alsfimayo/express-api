// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model user{
  id Int @id @default(autoincrement())
  
  email String @unique
  password String
  fname String
  lname String

}
model Customer{
  id Int @id @default(autoincrement())
  name String
  phone String  
  address String
  sales Sale[]
  transaction Transaction[]
}
model Product{
  id Int @id @default(autoincrement())
  name String
  price Float
  batch_no String
  catagoryId Int
  catagory Category @relation(fields: [catagoryId],references: [id])
  supplierId Int
  supplier Supplier @relation(fields: [supplierId],references: [id])
  saleItems SaleItem[] 
  stocks Stock[]
 }
 
 model Transaction{
  id Int @id @default(autoincrement())
  
  totalAmount Float
  discountAmount Float
  type TransactionType
  paymentmethod paymentMethod
  customerId Int
  saleId Int?
  sale Sale? @relation(fields: [saleId],references: [id])
  customer Customer @relation(fields: [customerId],references: [id])
  paid Paid?
  unpain unPaidTransaction?

  date DateTime @default(now())
 }
 enum TransactionType{
  CREDIT
  PAYMENT
 }
 enum paymentMethod{
  CASH
  CARD
  BANK_TRANSFER
  OTHER
 }
 model Paid{
  id Int @id @default(autoincrement())
  transactionId Int @unique
  name String //staff member received payment

  transaction Transaction @relation(fields: [transactionId],references: [id])
 }
 model unPaidTransaction{
  id Int @id @default(autoincrement())
  transactionId Int @unique
  transaction Transaction @relation(fields: [transactionId],references: [id])
  commitment Commitment[]
 }
 model Commitment{
  id Int @id @default(autoincrement())
  unpaidId Int
  unpaidtransaction unPaidTransaction @relation(fields: [unpaidId],references: [id])
  commitmentNote String?
  commitmentDate DateTime

 }
model Category{
  id Int @id @default(autoincrement())
  name String
  products Product[]
}
model Supplier {
  id Int @id @default(autoincrement())
  name String
  phone String
  products Product[]
}
model Sale{
  id Int @id @default(autoincrement())
  customerId Int
  date DateTime @default(now())
  total Float
  customer Customer @relation(fields: [customerId],references: [id])
  saleItems SaleItem[]
  transaction Transaction[]
}
model SaleItem {
  id Int @id @default(autoincrement())
  saleId Int
  sale Sale @relation(fields: [saleId],references: [id])
  productId Int
  product Product @relation(fields: [productId],references: [id])
  quantity Int
  unitPrice Float
}
model Stock{
  id Int @id @default(autoincrement())
  quantity Int
  manufacturingDate  DateTime?
  expiryDate DateTime
  productId Int
  product Product @relation(fields: [productId],references: [id])
}

